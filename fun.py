# -*- coding: utf-8 -*-
"""fun.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RDT06mGxl7SEtTG4NPih3dpUVDdz40JD
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Custom colormap for gradient effect
colors = ['#FF0000', '#FF4040', '#FF8080']  # Red to light red gradient
cm = LinearSegmentedColormap.from_list('custom', colors, N=10)

# Parametric equations for a heart shape
t = np.linspace(0, 2*np.pi, 1000)
x_base = 16 * (np.sin(t)**3)
y_base = 13 * np.cos(t) - 5 * np.cos(2*t) - 2 * np.cos(3*t) - np.cos(4*t)

# Create figure with a dark background
plt.figure(facecolor='#1A1A2E', figsize=(10, 10))  # Set figure background
ax = plt.gca()
ax.set_facecolor('#1A1A2E')  # Set axes background

# Generate layered hearts with gradient
for i, scale in enumerate(np.arange(1.0, 0.2, -0.1)):
    x = x_base * scale
    y = y_base * scale
    color = cm(i / 9)  # Gradient color based on layer
    ax.plot(x, y, color=color, linewidth=1.5)

# Add a glowing center effect
center_x = x_base * 0.1
center_y = y_base * 0.1
ax.plot(center_x, center_y, '#FF0000', linewidth=2, alpha=0.7)

# Add your name as title
ax.set_title('AǸdr3Ŵ   CħµÏ ', color='#FF4040', fontsize=20, pad=20)

# Set plot properties
ax.axis('equal')  # Equal aspect ratio
ax.axis('off')    # Hide axes

plt.show()

import time
from IPython.display import display, HTML

# Create a div to hold the clock
html_code = """
<div id="clock" style="color: #FF4040; background-color: #1A1A2E; font-family: Helvetica; font-size: 50px; font-weight: bold; text-align: center; padding: 20px;"></div>

<script>
function updateTime() {
    var now = new Date();
    var hours = now.getHours();
    var minutes = now.getMinutes();
    var seconds = now.getSeconds();
    var ampm = hours >= 12 ? 'PM' : 'AM';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0'+minutes : minutes;
    seconds = seconds < 10 ? '0'+seconds : seconds;
    var currentTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;
    document.getElementById('clock').innerHTML = currentTime;
    setTimeout(updateTime, 1000);
}
updateTime();
</script>
"""

# Display the HTML
display(HTML(html_code))

!pip install pyodide-py

!pip install pygame pyvirtualdisplay
from pyvirtualdisplay import Display
display = Display(visible=0, size=(800, 600))
display.start()

import random
import pygame
pygame.init()

# Constants (same as above)
WIDTH, HEIGHT = 800, 600
FPS = 60
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLACK = (0, 0, 0)

screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Space Explorer - AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻")
clock = pygame.time.Clock()

# Spaceship and asteroid properties (same as above)
spaceship_x = WIDTH // 2
spaceship_y = HEIGHT - 50
spaceship_speed = 5
asteroids = []
asteroid_speed = 4
stars = [(random.randint(0, WIDTH), random.randint(0, HEIGHT)) for _ in range(100)]

# Setup and loop (same as above, simplified for 100 frames)
setup()
for _ in range(100):  # Limited frames for Colab
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            break
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and spaceship_x > 20:
        spaceship_x -= spaceship_speed
    if keys[pygame.K_RIGHT] and spaceship_x < WIDTH - 20:
        spaceship_x += spaceship_speed
    if random.random() < 0.02:
        asteroids.append([random.randint(0, WIDTH), -50])
    for asteroid in asteroids[:]:
        asteroid[1] += asteroid_speed
        if asteroid[1] > HEIGHT:
            asteroids.remove(asteroid)
    screen.fill(BLACK)
    for star_x, star_y in stars:
        pygame.draw.circle(screen, WHITE, (star_x, star_y), 1)
    pygame.draw.rect(screen, RED, (spaceship_x - 20, spaceship_y - 20, 40, 40))
    for asteroid in asteroids:
        pygame.draw.circle(screen, WHITE, (int(asteroid[0]), int(asteroid[1])), 10)
    pygame.display.flip()
    clock.tick(FPS)

# Save a screenshot (Colab workaround)
pygame.image.save(screen, "space_explorer.png")
display.stop()
pygame.quit()

# Display the image in Colab
from IPython.display import Image
Image("space_explorer.png")

# Text-Based Adventure Game
def game():
    print("Welcome, AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻, to the Cosmic Quest!")
    print("You are a space explorer on a mission to find a lost alien artifact on an uncharted planet.")
    print("The year is 2025, and your journey begins now...\n")

    # Starting point
    choice = input("You land on the planet and see two paths: a dark cave or a glowing forest. Which do you choose? (cave/forest): ").lower()

    if choice == "cave":
        print("\nYou enter the dark cave. It's cold and eerie. You hear strange noises.")
        choice = input("You find a shiny object and a tunnel. Do you take the object or explore the tunnel? (object/tunnel): ").lower()
        if choice == "object":
            print("\nThe shiny object is the alien artifact! You win! Congratulations, AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻!")
        elif choice == "tunnel":
            print("\nThe tunnel collapses behind you. You're trapped! Game Over.")
        else:
            print("\nInvalid choice. You hesitate and get lost. Game Over.")
    elif choice == "forest":
        print("\nYou enter the glowing forest. The light is mesmerizing, but you spot movement.")
        choice = input("You see a friendly alien or a suspicious crate. Do you approach the alien or inspect the crate? (alien/crate): ").lower()
        if choice == "alien":
            print("\nThe alien guides you to the artifact! You win! Great job, AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻!")
        elif choice == "crate":
            print("\nThe crate explodes! You barely escape, but the artifact is lost. Game Over.")
        else:
            print("\nInvalid choice. You wander off and get lost. Game Over.")
    else:
        print("\nInvalid choice. You stand still and are captured by an unknown force. Game Over.")

    play_again = input("\nWould you like to play again? (yes/no): ").lower()
    if play_again == "yes":
        print("\n" + "-"*50)
        game()
    else:
        print("\nThanks for playing, AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻! Safe travels in the cosmos!")

# Start the game
game()

# Cosmic Calculator
def calculate():
    print("Welcome, AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻, to the Cosmic Calculator!")
    print("Navigate the stars with your calculations. Enter 'q' to quit.\n")

    while True:
        # Get user input
        num1 = input("Enter first number (or 'q' to quit): ")
        if num1.lower() == 'q':
            break

        try:
            num1 = float(num1)
        except ValueError:
            print("Invalid input! Please enter a number or 'q' to quit.")
            continue

        operation = input("Enter operation (+, -, *, /) or 'q' to quit: ")
        if operation.lower() == 'q':
            break
        if operation not in ['+', '-', '*', '/']:
            print("Invalid operation! Use +, -, *, or /.")
            continue

        num2 = input("Enter second number (or 'q' to quit): ")
        if num2.lower() == 'q':
            break

        try:
            num2 = float(num2)
        except ValueError:
            print("Invalid input! Please enter a number or 'q' to quit.")
            continue

        # Perform calculation
        if operation == '+':
            result = num1 + num2
            print(f"\n{num1} + {num2} = {result} - Calculated by AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻!")
        elif operation == '-':
            result = num1 - num2
            print(f"\n{num1} - {num2} = {result} - Calculated by AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻!")
        elif operation == '*':
            result = num1 * num2
            print(f"\n{num1} * {num2} = {result} - Calculated by AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻!")
        elif operation == '/':
            if num2 == 0:
                print("\nCannot divide by zero! Try again.")
                continue
            result = num1 / num2
            print(f"\n{num1} / {num2} = {result} - Calculated by AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻!")

        print("\n" + "-"*50)

# Start the calculator
calculate()

# Personalized Love Letter Generator
def generate_love_letter():
    print("Welcome to the Love Letter Generator, crafted for your special someone! 😍")
    her_name = input("Enter your girlfriend's name: ")

    # Predefined romantic messages
    compliments = ["amazing", "beautiful", "incredible", "radiant", "charming"]
    reasons = ["your smile lights up my world", "your laugh makes every day better",
               "your kindness inspires me", "your strength amazes me", "your love completes me"]

    # Random selections
    import random
    compliment = random.choice(compliments)
    reason = random.choice(reasons)

    # Generate the letter
    letter = f"""
Dear {her_name},

I just wanted to take a moment to tell you how {compliment} you are to me. Every day, I’m reminded of how {reason}. You make my heart soar like a spaceship exploring the stars!

With all my love,
AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻
    """

    print("\nHere’s your personalized love letter:\n")
    print(letter)
    print("Feel free to copy this and share it with her! 💕")

    again = input("\nWant to generate another? (yes/no): ").lower()
    if again == "yes":
        print("\n" + "-"*50)
        generate_love_letter()
    else:
        print("\nHope she loves it, AǸdr㉫Ŵ 🐯  උħµÏ 🤴🏻! 💖")

# Start the generator
generate_love_letter()

